0.6	0
0.7	0
1.5	0
2.2	1
0.2	0
1.4	0
0.6	0
0.9	0
2.8	1
3	1
1.5	1
1	0
2.4	1
1.4	0
1.5	1
2.9	1
0.7	0
2	1
2.5	1
0.2	0
0.2	0
1.6	0
3.6	1
1.3	0
1.8	1
0.9	0
1.4	0
0.7	1
3.2	0
0.4	0
2.1	1
1.5	0
0.2	0
0.3	0
2.4	1
0.1	0
1	0
2.9	0
3.6	0
2.5	1
0.5	0
1.1	0
0.5	0
1.1	0
0.8	0
2.1	1
0.3	0
2.9	1
0.2	0
3	1
0.2	0
1.8	0
0.1	0
0.9	0
0.7	1
0.2	0
0.1	0
0.9	0
0.8	0
0.3	0
"
d<-read.delim(textConnection(datatext),
header=TRUE,
sep="",
strip.white=TRUE)
log_model = glm(d$YearOfStudy ~ d$Vote, family = "binomial")
log_model = glm(d$Vote ~ d$YearOfStudy, family = "binomial")
summary(log_model)
library("boot", lib.loc="C:/Program Files/Microsoft/R Client/R_SERVER/library")
detach("package:boot", unload=TRUE)
1.200*30
1/200*30
1/200*30
(59+2)/3
sin(pi/3)
sin(pi/2)
7%%4
7>4
7!=6
if 7 in (7|8)
x
x <- 7+2
x
x <- "hello world
""
x <- "hello world
x <- "hello world
"
x
y <- "HI everyone"
y
1/200*3
x<-34+1
x<-3 + 4j
x <- "3+3i"
x <- 3+3I
4==5
4==4
x <- True
x <- 4==4
x
x<-FALSE
x
!x
x- 2
x=2
x
x = "Java is not fun"
x
x = 4==4
x
pnc <-  function(x) {
for (i in range(2, x+1)) {
if x % i == 0
getwd()
getwd()
getwd()
setwd("C:/Users/xthel_000/Desktop/NTU/R/Art of R")
getwd()
help("mean")
help("read.table")
example(seq)
seq> seq(0, 1, length.out=11)
seq(0, 1, length.out=11)
example(persp)
x <- c(88,5,12,13)
x <- c(x[1:2],168,x[3:4]) # insert 168 before the 12
x
x <- (1,2,3,4,5,6)
lengt(x)
length(x)
x <- (1,2,3,4,5,6)
length(x)
x <- c(1,2,3,4,5,6)
length(x)
x <- c(1,2,3,4,5,6)
length(x)
first1 <- function(x){
for (i in 1:length(x)){
if (x[i] ==1) break #break out of loop
}
return(i)
}
first1((c(1,2,3,7,9)))
first1((c(5,2,3,7,9)))
first1((c(5,2,3,1,9)))
first1((c(5,1,3,3,9)))
m <- rbind(c(1,2),c(3,4))
m
m+10:13
m <- rbind(c(1,2),c(3,4),c(5,6))
m
m+1:6 #adds  (10,11,12,13) to m
y <- vector(length=2) # create y ﬁrst
y[1] <- 5
y[2] <- 12
y
y <- data.frame(c(1,3),c(2,4))
y
y[1,][,1]
y[1,][,1] <- 8
y
m <- rbind(c(1,2),c(3,4))
m
m+10:13 #adds  (10,11,12,13) to m
c(1,2,4) + c(6,0,9,20,22)
x <- cbind(c(1,2,3),c(4,5,6))
x
x+c(1,2)
y <- c(1,1,0,1)
csx <- c(0,cumsum(y))
csx
m <- rbind(c(1,2),c(3,4))
m
y <- vector(length=2) # create y ﬁrst
y
y[1] <- 5
y[2] <- 12
y
y <- data.frame(c(1,3),c(2,4))
y[1,][,1] <- 8 #Change value in 1,1 to 8
y
y <- data.frame(c(1,3),c(2,4))
x <- y <- data.frame(c(1,0),c(2,0))
x %*% y
x <- data.frame(c(1,0),c(2,0))
y <- data.frame(c(1,3),c(2,4))
x %*% y
x
y
m <- rbind(c(1,2),c(3,4))
n <- rbind(c(1,0),c(3,0))
m%*%n
m
n
u <- c(5,2,8)
v <- c(1,3,9)
u>v
w <- function(x) return(x+1)
w(u)
sqrt(1:9)
y <- c(1.2,3.9,0.4)
z <- round(y)
z
f function(x,c) return((x+c)^2)
f <- function(x,c) return((x+c)^2)
f(1:3,0)
f(1:3,1)
f(1:3,1:3)
f <- function(x,c) {
if (length(c) != 1) stop("vector c not allowed")
return((x+c)^2)
}
f(1:3,1:3)
f(1:3,1)
z12 <- function(z) return(c(z,z^2))
z12(1:8)
matrix(z12(x),ncol=2) #Arrange the above into a 8x2 matrix
matrix(z12(1:8),ncol=2) #Arrange the above into a 8x2 matrix
matrix(z12(1:8),ncol=3) #Arrange the above into a 8x2 matrix
z12 <- function(z) return(c(z,z^2))
sapply(1:8,z12)
z12 <- function(z) return(c(z,z^2,sqrt(z)))
sapply(1:8,z12)
z12 <- function(z) return(c(z,z^2))
sapply(1:8,z12)
x <- c(88,NA,12,168,13)
mean(x)
mean(x,na.rm=T)
x <- c(88,NULL,12,168,13)
mean(x)
z <- NULL
for (i in 1:10) if (i %%2 == 0) z <- c(z,i)
z
seq(2,11,2) #Display values from 2 to 10 with a step of 2
2 *1:5
z <- NA
for (i in 1:10) if (i %%2 == 0) z <- c(z,i)
z #NA 2 4 6 8 10
u <- NULL
length(u)
v <- NA
length(u)
length(v)
z <- c(5,2,-3,8)
w <- z[z*z>8]
w
z*z>8
j <- z
y[j]
z <- c(5,2,-3,8)
j <- z
y <- c(1,2,30,5)
y[j]
z <- c(5,2,-3,8)
j <- z*z>8
y <- c(1,2,30,5)
y[j]
x <- c(1,3,8,2,20)
x[x > 3] <- 0
x
x <- c(6,1:3,NA,12)
x
x[x > 5]
subset(x,x > 5)
z <- c(5,2,-3,8)
which(z*z > 8)
library(devtools)
options(devtools.install.args = "--no-multiarch") # if you have 64-bit R only, you can skip this
install_github("Microsoft/LightGBM", subdir = "R-package")
library(xgboost)
library(ggplot2)
set.seed(2004)
library(rpart)
library(rattle)					# Fancy tree plot
library(rpart.plot)
library(party)
library(sandwich)
library(caret)
library(randomForest)
library(e1071)
install.packages("e1071")
library(e1071)
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
View(out)
out[1,][,1]
out[1]
?cbind
X1 <- matrix(df[,1])
View(df)
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
View(out)
library(nnet)
logistic <- multinom(y~out)
?multinom
View(df)
summary(logistic)
logistic <- glm(y~out, family = binomial)
summary(logistic)
pred <- predict(logistic, newdata = out, type = "response")
df1 <- data.frame(out)
pred <- predict(logistic, newdata = df1, type = "response")
p[1]
pred[1]
for (i in seq(1:118)){
if (pred[i]>= 0.5){
pred[i] <- 1
}
if (pred[i] <0.5){
pred[i] <- 0
}
}
mean(pred == y)
out_train <- out[1:70,]
out_test <- out[71:118,]
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
library(nnet)
out_train <- out[1:70,]
out_test <- out[71:118,]
logistic <- glm(y~out_train, family = binomial)
summary(logistic)
df1 <- data.frame(out_test)
pred <- predict(logistic, newdata = df1, type = "response")
for (i in seq(1:118)){
if (pred[i]>= 0.5){
pred[i] <- 1
}
if (pred[i] <0.5){
pred[i] <- 0
}
}
mean(pred == y)
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
library(nnet)
out_train <- out[1:70,]
out_test <- out[71:118,]
y_train <- y[1:70,]
y_test <- y[71:118,]
logistic <- glm(y_train~out_train, family = binomial)
summary(logistic)
df1 <- data.frame(out_test)
pred <- predict(logistic, newdata = df1, type = "response")
for (i in seq(1:118)){
if (pred[i]>= 0.5){
pred[i] <- 1
}
if (pred[i] <0.5){
pred[i] <- 0
}
}
mean(pred == y_test)
for (i in seq(1:48)){
if (pred[i]>= 0.5){
pred[i] <- 1
}
if (pred[i] <0.5){
pred[i] <- 0
}
}
mean(pred == y_test)
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
library(nnet)
out_train <- out[1:70,]
out_test <- out[71:118,]
y_train <- y[1:70,]
y_test <- y[71:118,]
logistic <- glm(y_train~out_train, family = binomial)
df1 <- data.frame(out_test)
pred <- predict(logistic, newdata = df1, type = "response")
pred
logistic
pred <- predict(logistic, newdata = df1, type = "response")
prob.train <- predict(logistic, type = 'response')
prob.train
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
library(nnet)
out_train <- out[1:70,]
out_test <- out[71:118,]
y_train <- y[1:70,]
y_test <- y[71:118,]
logistic <- glm(y_train~out_train, family = binomial)
df1 <- data.frame(out_test)
prob.train <- predict(logistic, type = 'response')
pred <- predict(logistic, newdata = df1, type = "response")
View(out_train)
mean(pred == y_test)
View(df1)
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
library(nnet)
out_train <- out[1:70,]
out_test <- out[71:118,]
y_train <- y[1:70,]
y_test <- y[71:118,]
out_train <- data.frame(out_train)
logistic <- glm(y_train~out_train, family = binomial)
summary(logistic)
df1 <- data.frame(out_test)
View(out_train)
View(out_train)
str(out_train)
setwd('G:/NTU/Coursera/Machine Learning/3/machine-learning-ex2/ex2')
df <- read.table('ex2data2.txt', header = FALSE, sep = ',')
X1 <- matrix(df[,1])
X2 <- matrix(df[,2])
y <- matrix(df[,3])
degree = 6
nrow(df)
out <- matrix(data = 1, nrow = nrow(df), ncol = 1)
for (i in seq(1, degree)){
for (j in seq(0,i)){
out <- cbind(out, (X1^(i-j))*(X2^j))
}
}
library(nnet)
out_train <- out[1:70,]
out_test <- out[71:118,]
y_train <- data.frame(y[1:70,])
y_test <- y[71:118,]
out_train <- data.frame(out_train)
logistic <- glm(y_train~out_train, family = binomial)
logistic <- glm(y_train ~ out_train, family = binomial)
train_set <- cbind(out_train, y_train)
View(train_set)
summary(train_set)
logistic <- glm(y.1.70... ~ . , data = train_set, family = binomial)
summary(logistic)
df1 <- data.frame(out_test)
pred <- predict(logistic, newdata = df1, type = "response")
pred
for (i in seq(1:48)){
if (pred[i]>= 0.5){
pred[i] <- 1
}
if (pred[i] <0.5){
pred[i] <- 0
}
}
mean(pred == y_test)
